---
description: TypeScriptでコーディングする際のガイドライン
globs: src/**/*.ts,src/**/*.tsx
alwaysApply: false
---

# TypeScriptコーディングのガイドライン

## 方針

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様かを可能な限り明記する
- 実装が内部状態を持たないとき、classによる実装を避けて関数を優先する
- 副作用を避けるために外部依存を抽象化し、テストはインメモリで処理する

## 型の使用方針

- `any` の使用を避ける
- `unknown` を使用してから型を絞り込む
- Utility Typesを活用する
- 意味のある名前をつける
- 型の意図を明確にする

```typescript
// Good
type UserId = string;
type UserData = {
  id: UserId;
  createdAt: Date;
};

// Bad
type Data = any;
```

## エラー処理

### 1. Result型を活用する

```typescript
import { err, ok, Result } from "npm:neverthrow";
```

### 2. エラー型を定義する

- 具体的なケースを列挙
- エラーメッセージを含める
- 型の網羅性チェックを活用

## 実装方法の選択基準

- 操作の複雑性
- 内部状態の有無
- 外部依存の有無
- テスト容易性
- 設定やリソースの必要性
- ライフサイクル管理の必要性

## 一般的なルール

### 1. 依存性の注入

- 外部依存はコンストラクタで注入
- テスト時にモックに置き換え可能に
- グローバルな状態を避ける

### 2. インターフェースの設計

- 必要最小限のメソッドを定義
- 実装の詳細を含めない
- プラットフォーム固有の型を避ける

### 3. テスト容易性

- モックの実装を簡潔に
- エッジケースのテストを含める
- テストヘルパーを適切に分離

### 4. コードの分割

- 単一責任の原則に従う
- 適切な粒度でモジュール化
- 循環参照を避ける
