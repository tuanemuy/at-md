---
description: プロジェクトを進める上での原則です。
globs: 
alwaysApply: true
---

# コーディングの原則

## 1. ドメイン駆動設計で考える

## 2. 関数型アプローチで実装する

- 実装が内部状態を持たないとき、classによる実装を避けて純粋関数を優先する
- 不変データ構造を使用
- 外部依存を抽象化し、副作用を分離

## 3. テスト容易性を考える

- 単一責任の原則に従う
- 適切な粒度でモジュール化する
- 外部依存をモックで置き換えできるようにする

## 4. 型安全性を考える

- 仕様をコメントにJSDocで明記する
- 最初に型や関数のインターフェースを考える
- 型の命名は意図が明確になるように行う
- `any` の使用を避ける
- `unknown` を使用してから型を絞り込む
- Utility TypesやBanded Typeを活用する
- Zodによる型定義やバリデーションを活用する

## 5. 依存関係を正しく取り扱う

- 内部モジュールの参照は `@/*` エイリアスを使用する
- 同一モジュール内のファイルは相対パスで参照する
- 外部ライブラリを使用する前にドキュメントを確認する
- 外部ライブラリインストールする前にユーザーに確認する
- 外部ライブラリのバージョンを下げる前に必ずユーザーに確認する

## 6. エラー処理にResult型を活用する

- `npm:neverthrow` のResult型を活用する
- 具体的なケースを列挙する
- エラーメッセージを含める
- 型の網羅性チェックを活用する
