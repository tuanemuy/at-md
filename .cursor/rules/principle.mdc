---
description: プロジェクトを進める上での原則です。
globs: 
alwaysApply: true
---

# プロジェクト進行の原則

## コーディングの指針

### 1. ドメイン駆動設計で考える

### 2. 関数型アプローチで実装する

- 実装が内部状態を持たないとき、classによる実装を避けて純粋関数を優先する
- 不変データ構造を使用
- 外部依存を抽象化し、副作用を分離

### 3. テスト容易性を考える

- 単一責任の原則に従う
- 適切な粒度でモジュール化する
- 外部依存をモックで置き換えできるようにする

### 4. 型安全性を考える

- 仕様をコメントにJSDocで明記する
- 最初に型や関数のインターフェースを考える
- 型の命名は意図が明確になるように行う
- `any` の使用を避ける
- `unknown` を使用してから型を絞り込む
- Utility TypesやBanded Typeを活用する
- Zodによる型定義やバリデーションを活用する

### 5. 依存関係を正しく取り扱う

- 内部モジュールの参照は `@/*` エイリアスを使用する
- 同一モジュール内のファイルは相対パスで参照する
- 外部ライブラリを使用する前にドキュメントを確認する
- 外部ライブラリインストールする前にユーザーに確認する
- 外部ライブラリのバージョンを下げる前に必ずユーザーに確認する

### 6. エラー処理にResult型を活用する

- `npm:neverthrow` のResult型を活用する
- 具体的なケースを列挙する
- エラーメッセージを含める
- 型の網羅性チェックを活用する

## 作業の進め方

作業はテスト可能な小さな単位に区切り、**必ず**以下の手順に従って進めてください。

作業の途中で設計を変更する場合は、先に `docs/*.md` を修正してください。

1. 行う作業内容を確認する
2. `docs/*.md` の設計を確認する
3. 作業を行う
4. テストを実装する
5. テストを行う（`pnpm test`）
6. 型チェックを行う（`pnpm typecheck`）
7. 型エラーを修正する
8. 静的解析を行う（`pnpm lint`）
9. リンターエラーを修正する
10. テストを行う（`pnpm test`）
11. 実装を修正する
12. エラーが無くなるまで5~11を繰り返す
13. ユーザーに確認する
14. 作業の進捗を `docs/progress.md` に記録する
